View(c500)
l500 <- data.frame(trans500$rotation) # loadings
View(mdat)
View(l500)
trans500$rotation
trans500
summary(trans500)
summary(c500)
c500
View(c500)
head(c500$preProcess$trace)
head(trans500$preProcess$trace)
summary(c500)
prcomp(c500, center=FALSE)
pcaCharts <- function(x) {
x.var <- x$sdev ^ 2
x.pvar <- x.var/sum(x.var)
print("proportions of variance:")
print(x.pvar)
par(mfrow=c(2,2))
plot(x.pvar,xlab="Principal component", ylab="Proportion of variance explained", ylim=c(0,1), type='b')
plot(cumsum(x.pvar),xlab="Principal component", ylab="Cumulative Proportion of variance explained", ylim=c(0,1), type='b')
screeplot(x)
screeplot(x,type="l")
par(mfrow=c(1,1))
}
cpaCharts(prcomp(c500, center=FALSE))
pcaCharts(prcomp(c500, center=FALSE))
library(ggplot2)
library(dplyr)
library(grid)
library(ROCR)
library(tidyr)
library(lubridate)
library(plyr)
library(hydrostats)
library(ggpubr)
library(forcats)
library(ade4)
# Proportional coverage of each habitat variable at scale
# Read buffer data
b1 <- read.csv("Dataframes/Buffers/buffer_1_kmb.csv", header = TRUE)[,6:28]
b2 <- read.csv("Dataframes/Buffers/buffer_2_kmb.csv", header = TRUE)[,6:28]
b5 <- read.csv("Dataframes/Buffers/buffer_5_kmb.csv", header = TRUE)[,6:28]
# Proportional coverage of each habitat variable at scale
# Read buffer data
b1 <- read.csv("../data_out/breeding success/dataframes/Buffers/buffer_1_kmb.csv", header = TRUE)[,6:28]
setwd("C:/Users/amcarava/Dropbox/Academic/projects/201706_SHINE_WP1/code/discarded_plots")
b2 <- read.csv("Dataframes/Buffers/buffer_2_kmb.csv", header = TRUE)[,6:28]
# Proportional coverage of each habitat variable at scale
# Read buffer data
b1 <- read.csv("../data_out/breeding success/dataframes/Buffers/buffer_1_kmb.csv", header = TRUE)[,6:28]
# Proportional coverage of each habitat variable at scale
# Read buffer data
b1 <- read.csv("../../data_out/breeding success/dataframes/Buffers/buffer_1_kmb.csv", header = TRUE)[,6:28]
b2 <- read.csv("../../data_out/breeding success/dataframes/Buffers/buffer_2_kmb.csv", header = TRUE)[,6:28]
b5 <- read.csv("../../data_out/breeding success/dataframes/Buffers/buffer_5_kmb.csv", header = TRUE)[,6:28]
buffers <- list(b1,b2,b5)
names(buffers) <- c("b1", "b2", "b5")
buffers <- lapply(buffers, function(x) x[!(names(x) %in% c("dist_windfarm", "dist_latecon",
"dist_urban", "ndvi", "elevation",
"road_density", "max_temp", "max_temp_var",
"min_temp", "min_temp_var", "rain_early",
"rain_late", "hilliness", "natgrass"))])
# Sort data into columns
buffers <- lapply(buffers, function(x) gather(x, year))
new_col_name <- c("year", "habitat", "value")
buffers <- lapply(buffers, setNames, nm = new_col_name)
buffers$b1$year <- factor(buffers$b1$year)
buffers$b2$year <- factor(buffers$b2$year)
buffers$b5$year <- factor(buffers$b5$year)
hab <- unique(buffers$b1$habitat)
hab.rep <- data.frame(habitat = c("prime_coniferous", "pasture", "marsh_heath", "late_coniferous",
"early_coniferous", "broadleaved", "bog", "agriculture"),
rep = c("Conifer (3-12 yrs)", "Pasture", "Heath/shrub", "Conifer (13+ yrs)", "Conifer (0-2 yrs)",
"Broadleaved", "Bog", "Arable"))
buffers <- lapply(buffers, function(x) merge(x, hab.rep, by = "habitat"))
head(buffers$b1)
# Function to produce summary statistics (mean and +/- sd)
data_summary <- function(x) {
m <- mean(x)
ymin <- m-sd(x)
ymax <- m+sd(x)
return(c(y=m,ymin=ymin,ymax=ymax))
}
source("theme_AC1.R")
names(buffers$b5)
b5 <- read.csv("../../data_out/breeding success/dataframes/Buffers/buffer_5_kmb.csv", header = TRUE)[,6:28]
buffers <- list(b1,b2,b5)
names(buffers) <- c("b1", "b2", "b5")
buffers <- lapply(buffers, function(x) x[!(names(x) %in% c("dist_windfarm", "dist_latecon",
"dist_urban", "ndvi", "elevation",
"road_density", "max_temp", "max_temp_var",
"min_temp", "min_temp_var", "rain_early",
"rain_late", "hilliness", "natgrass"))])
names(b5)
b5 <- read.csv("../../data_out/breeding success/dataframes/Buffers/buffer_5_kmb.csv", header = TRUE)[,6:28]
buffers <- list(b5)
names(buffers) <- c("b5")
buffers <- lapply(buffers, function(x) x[!(names(x) %in% c("dist_windfarm", "dist_latecon",
"dist_urban", "ndvi", "elevation",
"road_density", "max_temp", "max_temp_var",
"min_temp", "min_temp_var", "rain_early",
"rain_late", "hilliness", "natgrass"))])
View(buffers)
names(buffers$b5)
buffers$b5$heath_bog <- buffers$b5$bog + buffers$b5$marsh_heath
buffers$b5$pre <- buffers$b5$early_coniferous + buffers$b5$prime_coniferous
buffers <- lapply(buffers, function(x) x[!(names(x) %in% c("bog", "mrsh_heath", "early_coniferous", "prime_coniferous"))])
buffers$b5$ag_pas <- buffers$b5$agriculture + buffers$b5$pasture
buffers <- lapply(buffers, function(x) x[!(names(x) %in% c("agriculture", "pasture"))])
buffers <- lapply(buffers, function(x) x[!(names(x) %in% c("marsh_heath))])
buffers <- lapply(buffers, function(x) x[!(names(x) %in% c("marsh_heath"))])
buffers <- lapply(buffers, function(x) gather(x, year))
new_col_name <- c("year", "habitat", "value")
buffers <- lapply(buffers, setNames, nm = new_col_name)
buffers$b5$year <- factor(buffers$b5$year)
unique(buffers$b5$habitat)
b5 <- read.csv("../../data_out/breeding success/dataframes/Buffers/buffer_5_kmb.csv", header = TRUE)[,6:28]
buffers <- list(b5)
names(buffers) <- c("b5")
buffers <- lapply(buffers, function(x) x[!(names(x) %in% c("dist_windfarm", "dist_latecon",
"dist_urban", "ndvi", "elevation",
"road_density", "max_temp", "max_temp_var",
"min_temp", "min_temp_var", "rain_early",
"rain_late", "hilliness", "natgrass"))])
b5 <- read.csv("../../data_out/breeding success/dataframes/Buffers/buffer_5_kmb.csv", header = TRUE)[,6:28]
b5$heath_bog <- b5$bog + marsh_heath
b5$heath_bog <- b5$bog + b5$marsh_heath
b5$pre <- b5$early_coniferous + me_coniferous
b5$pre <- b5$early_coniferous + b5$prime_coniferous
b5$ag_pas <- iculture + b5$pasture
b5$ag_pas <- b5$agriculture + b5$pasture
buffers <- list(b5)
names(buffers) <- c("b5")
buffers <- lapply(buffers, function(x) x[!(names(x) %in% c("dist_windfarm", "dist_latecon",
"dist_urban", "ndvi", "elevation",
"road_density", "max_temp", "max_temp_var",
"min_temp", "min_temp_var", "rain_early",
"rain_late", "hilliness", "natgrass",
"bog", "marsh_heath", "early_coniferous", "prime_coniferous", "agriculture", "pasture"))])
# Sort data into columns
buffers <- lapply(buffers, function(x) gather(x, year))
new_col_name <- c("year", "habitat", "value")
b5 <- read.csv("../../data_out/breeding success/dataframes/Buffers/buffer_5_kmb.csv", header = TRUE)[,6:28]
b5$heath_bog <- b5$bog + b5$marsh_heath
b5$pre <- b5$early_coniferous + b5$prime_coniferous
b5$ag_pas <- b5$agriculture + b5$pasture
a <- gather(b5, year)
View(a)
a <- gather(b5, key = "year")
View(a)
# Proportional coverage of each habitat variable at scale
# Read buffer data
b1 <- read.csv("../../data_out/breeding success/dataframes/Buffers/buffer_1_kmb.csv", header = TRUE)[,6:28]
b2 <- read.csv("../../data_out/breeding success/dataframes/Buffers/buffer_2_kmb.csv", header = TRUE)[,6:28]
b5 <- read.csv("../../data_out/breeding success/dataframes/Buffers/buffer_5_kmb.csv", header = TRUE)[,6:28]
library(reshape2)
a <- melt(b5, id = "year")
View(a)
a <- setNames(a, c("year", "habitat", "value"))
View(a)
a$year <- factor(a$year)
unique(a$habitat)
# Proportional coverage of each habitat variable at scale
# Read buffer data
b5 <- read.csv("../../data_out/breeding success/dataframes/Buffers/buffer_5_kmb.csv", header = TRUE)[,6:28]
b5$heath_bog <- b5$bog + b5$marsh_heath
b5$pre <- b5$early_coniferous + b5$prime_coniferous
b5$ag_pas <- b5$agriculture + b5$pasture
b5 <- b5[!(names(b5) %in% c("dist_windfarm", "dist_latecon",
"dist_urban", "ndvi", "elevation",
"road_density", "max_temp", "max_temp_var",
"min_temp", "min_temp_var", "rain_early",
"rain_late", "hilliness", "natgrass",
"bog", "marsh_heath", "early_coniferous", "prime_coniferous", "agriculture", "pasture"))])
b5 <- b5[!(names(b5) %in% c("dist_windfarm", "dist_latecon",
"dist_urban", "ndvi", "elevation",
"road_density", "max_temp", "max_temp_var",
"min_temp", "min_temp_var", "rain_early",
"rain_late", "hilliness", "natgrass",
"bog", "marsh_heath", "early_coniferous", "prime_coniferous",
"agriculture", "pasture"))]
library(reshape2)
a <- melt(b5, id = "year")
a <- setNames(a, c("year", "habitat", "value"))
a$year <- factor(a$year)
unique(a$habitat)
hab.rep <- data.frame(habitat = c("boadleaved", "late_coniferous", "heath_bog", "pre",
"ag_pas"),
rep = c("Broadleaved forest", "Mature coniferous forest", "Heather moorland, bog and scrub", "Pre-thicket coniferous forest", "Agriculture and pasture"))
b5 <- merge(b5, hab.rep, by = "habitat"))
b5 <- merge(b5, hab.rep, by = "habitat")
a <- merge(a, hab.rep, by = "habitat")
View(a)
head(a)
# Function to produce summary statistics (mean and +/- sd)
data_summary <- function(x) {
m <- mean(x)
ymin <- m-sd(x)
ymax <- m+sd(x)
return(c(y=m,ymin=ymin,ymax=ymax))
}
source("theme_AC1.R")
pb5 <- ggplot(a, aes(rep, value, fill = year))+
geom_boxplot() +
theme_ac1() +
theme(axis.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 14),
legend.justification=c(1,0), legend.position=c(0.98,0.65),
legend.text = element_text(size = 14), legend.title = element_text(size = 14))+
ylab("Total area (km^2)") +
xlab("Land class")+
scale_x_discrete(limits = rev(levels(buffers$b1$rep))) +
scale_fill_manual(values = c("2010" = "grey", "2015" = "white"), name = "Year") +
coord_flip() +
guides(fill = guide_legend(reverse = TRUE))
source("theme_AC1.R")
pb5 <- ggplot(a, aes(rep, value, fill = year))+
geom_boxplot() +
theme_ac1() +
theme(axis.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 14),
legend.justification=c(1,0), legend.position=c(0.98,0.65),
legend.text = element_text(size = 14), legend.title = element_text(size = 14))+
ylab("Total area (km^2)") +
xlab("Land class")+
scale_x_discrete(limits = rev(levels(buffers$b1$rep))) +
scale_fill_manual(values = c("2010" = "grey", "2015" = "white"), name = "Year") +
coord_flip() +
guides(fill = guide_legend(reverse = TRUE))
pb5
# Proportional coverage of each habitat variable at scale
# Read buffer data
b5 <- read.csv("../../data_out/breeding success/dataframes/Buffers/buffer_1_kmb.csv", header = TRUE)[,6:28]
b5$heath_bog <- b5$bog + b5$marsh_heath
b5$pre <- b5$early_coniferous + b5$prime_coniferous
b5$ag_pas <- b5$agriculture + b5$pasture
b5 <- b5[!(names(b5) %in% c("dist_windfarm", "dist_latecon",
"dist_urban", "ndvi", "elevation",
"road_density", "max_temp", "max_temp_var",
"min_temp", "min_temp_var", "rain_early",
"rain_late", "hilliness", "natgrass",
"bog", "marsh_heath", "early_coniferous", "prime_coniferous",
"agriculture", "pasture"))]
library(reshape2)
a <- melt(b5, id = "year")
a <- setNames(a, c("year", "habitat", "value"))
a$year <- factor(a$year)
unique(a$habitat)
hab.rep <- data.frame(habitat = c("boadleaved", "late_coniferous", "heath_bog", "pre",
"ag_pas"),
rep = c("Broadleaved forest", "Mature coniferous forest", "Heather moorland, bog and scrub", "Pre-thicket coniferous forest", "Agriculture and pasture"))
a <- merge(a, hab.rep, by = "habitat")
head(a)
# Function to produce summary statistics (mean and +/- sd)
data_summary <- function(x) {
m <- mean(x)
ymin <- m-sd(x)
ymax <- m+sd(x)
return(c(y=m,ymin=ymin,ymax=ymax))
}
ggplot(a, aes(rep, value, fill = year))+
geom_boxplot() +
theme_ac1() +
theme(axis.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 14),
legend.justification=c(1,0), legend.position=c(0.98,0.65),
legend.text = element_text(size = 14), legend.title = element_text(size = 14))+
ylab("Total area (km^2)") +
xlab("Land class")+
scale_x_discrete(limits = rev(levels(buffers$b1$rep))) +
scale_fill_manual(values = c("2010" = "grey", "2015" = "white"), name = "Year") +
coord_flip() +
guides(fill = guide_legend(reverse = TRUE))
pb5 <- ggplot(a, aes(rep, value, fill = year))+
geom_boxplot() +
theme_ac1() +
theme(axis.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 14),
legend.justification=c(1,0), legend.position=c(0.98,0.65),
legend.text = element_text(size = 14), legend.title = element_text(size = 14))+
ylab("Total area (km^2)") +
xlab("Land class")+
scale_x_discrete(limits = rev(levels(buffers$b1$rep))) +
scale_fill_manual(values = c("2010" = "grey", "2015" = "white"), name = "Year") +
coord_flip() +
guides(fill = guide_legend(reverse = TRUE))
a2 <- a[!a$year =="2010"]
a2 <- a$year[!a$year =="2010"]
a2 <- a$[!a$year =="1"]
a2 <- a[!a$year =="1"]
a2 <- a[!(a$year =="1"),]
ggplot(a2, aes(rep, value, fill = year))+
geom_boxplot() +
theme_ac1() +
theme(axis.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 14),
legend.justification=c(1,0), legend.position=c(0.98,0.65),
legend.text = element_text(size = 14), legend.title = element_text(size = 14))+
ylab("Total area (km^2)") +
xlab("Land class")+
scale_x_discrete(limits = rev(levels(buffers$b1$rep))) +
scale_fill_manual(values = c("2010" = "grey", "2015" = "white"), name = "Year") +
coord_flip() +
guides(fill = guide_legend(reverse = TRUE))
ggplot(a2, aes(rep, value))+
geom_boxplot() +
theme_ac1() +
theme(axis.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 14),
legend.justification=c(1,0), legend.position=c(0.98,0.65),
legend.text = element_text(size = 14), legend.title = element_text(size = 14))+
ylab("Total area (km^2)") +
xlab("Land class")+
scale_x_discrete(limits = rev(levels(buffers$b1$rep))) +
scale_fill_manual(values = c("2010" = "grey", "2015" = "white"), name = "Year") +
coord_flip() +
guides(fill = guide_legend(reverse = TRUE))
b5$totfor <- b5$late_coniferous + b5$pre
a <- melt(b5, id = "year")
a <- setNames(a, c("year", "habitat", "value"))
a$year <- factor(a$year)
unique(a$habitat)
hab.rep <- data.frame(habitat = c("boadleaved", "late_coniferous", "heath_bog", "pre",
"ag_pas", "totfor"),
rep = c("Broadleaved forest", "Mature coniferous forest", "Heather moorland, bog and scrub", "Pre-thicket coniferous forest", "Agriculture and pasture", "Total coniferous forest"))
a <- merge(a, hab.rep, by = "habitat")
head(a)
a2 <- a[!(a$year =="1"),]
ggplot(a2, aes(rep, value))+
geom_boxplot() +
theme_ac1() +
theme(axis.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 14),
legend.justification=c(1,0), legend.position=c(0.98,0.65),
legend.text = element_text(size = 14), legend.title = element_text(size = 14))+
ylab("Total area (km^2)") +
xlab("Land class")+
scale_x_discrete(limits = rev(levels(buffers$b1$rep))) +
scale_fill_manual(values = c("2010" = "grey", "2015" = "white"), name = "Year") +
coord_flip() +
guides(fill = guide_legend(reverse = TRUE))
ggplot(a2, aes(rep, value))+
geom_boxplot() +
theme_ac1() +
theme(axis.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 14),
legend.justification=c(1,0), legend.position=c(0.98,0.65),
legend.text = element_text(size = 14), legend.title = element_text(size = 14))+
ylab("Total area (km^2)") +
xlab("Land class")+
scale_x_discrete(limits = rev(levels(buffers$b1$rep))) +
scale_fill_manual(values = c("2010" = "grey", "2015" = "white"), name = "Year") +
coord_flip()
ggplot(a2, aes(rep, value))+
geom_boxplot() +
theme_ac1() +
theme(axis.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 14),
legend.justification=c(1,0), legend.position=c(0.98,0.65),
legend.text = element_text(size = 14), legend.title = element_text(size = 14))+
ylab("Total area (km^2)") +
xlab("Land class")+
scale_x_discrete(limits = rev(levels(a2$rep))) +
scale_fill_manual(values = c("2010" = "grey", "2015" = "white"), name = "Year") +
coord_flip() +
guides(fill = guide_legend(reverse = TRUE))
ggplot(a2, aes(rep, value))+
geom_boxplot() +
theme_ac1() +
theme(axis.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 14))+
ylab("Total area (km^2)") +
xlab("Land class")+
scale_x_discrete(limits = rev(levels(a2$rep)))
coord_flip()
ggplot(a2, aes(rep, value))+
geom_boxplot() +
theme_ac1() +
theme(axis.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 14))+
ylab("Total area (km^2)") +
xlab("Land class")+
scale_x_discrete(limits = rev(levels(a2$rep))) +
coord_flip()
ggplot(a2, aes(rep, value))+
geom_boxplot() +
theme_ac1() +
theme(axis.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 14))+
ylab("Total area (km^2)") +
xlab("Land class")+
#scale_x_discrete(limits = rev(levels(a2$rep))) +
coord_flip()
unique(a$habitat)
a <- melt(b5, id = "year")
a <- setNames(a, c("year", "habitat", "value"))
a$year <- factor(a$year)
unique(a$habitat)
hab.rep <- data.frame(habitat = c("broadleaved", "late_coniferous", "heath_bog", "pre",
"ag_pas", "totfor"),
rep = c("Broadleaved forest", "Mature coniferous forest", "Heather moorland, bog and scrub", "Pre-thicket coniferous forest", "Agriculture and pasture", "Total coniferous forest"))
a <- merge(a, hab.rep, by = "habitat")
head(a)
a2 <- a[!(a$year =="1"),]
ggplot(a2, aes(rep, value))+
geom_boxplot() +
theme_ac1() +
theme(axis.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 14))+
ylab("Total area (km^2)") +
xlab("Land class")+
scale_x_discrete(limits = rev(levels(a2$rep))) +
coord_flip()
pb5 <- ggplot(a2, aes(rep, value))+
geom_boxplot() +
theme_ac1() +
theme(axis.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 14))+
ylab("Total area (km^2)") +
xlab("Land class")+
scale_x_discrete(limits = rev(levels(a2$rep))) +
coord_flip()
png('habitats3.png', type = "cairo", units="in", width=8, height=6, res=300)
pb5
dev.off()
png('../figures/all_territories.png', type = "cairo", units="in", width=4, height=3, res=300)
pb5
setwd("C:/Users/amcarava/Dropbox/Academic/projects/201805_shine_wp3/code")
png('../figures/all_territories.png', type = "cairo", units="in", width=4, height=3, res=300)
pb5
dev.off()
pb5 <- ggplot(a2, aes(rep, value))+
geom_boxplot() +
theme_ac1() +
theme(axis.title = element_text(size = 18, face = "bold"),
axis.text = element_text(size = 18))+
ylab("Total area (km^2)") +
xlab("Land class")+
scale_x_discrete(limits = rev(levels(a2$rep))) +
coord_flip()
png('../figures/all_territories.png', type = "cairo", units="in", width=8, height=6, res=300)
pb5
dev.off()
gadm36_IRL_0_sp <- readRDS("C:/Users/amcarava/Downloads/gadm36_IRL_0_sp.rds")
plot(gadm36_IRL_0_sp)
gadm36_IRL_0_sf2 <- readRDS("C:/Users/amcarava/Downloads/gadm36_IRL_0_sf.rds")
plot(gadm36_IRL_0_sp2)
plot(gadm36_IRL_0_sf2)
gadm36_IRL_1_sf <- readRDS("C:/Users/amcarava/Downloads/gadm36_IRL_1_sf.rds")
plot(gadm36_IRL_1_sf)
gadm36_IRL_0_sp <- readRDS("C:/Users/amcarava/Downloads/gadm36_IRL_0_sp.rds")
crs(gadm36_IRL_0_sp)
proj(gadm36_IRL_0_sp)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(dplyr)
library(tidyr)
library(ggplot2)
pdat <- read.csv("exploration_app/data/all_data.csv")
#### Counts, tarsus data (mean & SD) and regression coefficients for each species
pdat %>% filter(code == "GRETI") %>% slice(which.max(max_t)) # Removing GRETI outliers identified a-priori
pdat %>% filter(code == "GRETI") %>% slice(which.min(max_t))
pdat <- pdat[!(pdat$code == "GRETI" & pdat$ring_no == "Y638208"),]
pdat <- pdat[!(pdat$code == "GRETI" & pdat$ring_no == "AFB9885"),]
dat.1 <- pdat %>%
group_by(code) %>%
summarise(count = length(code),
mean_min = mean(min_t), sd_min = sd(min_t),
mean_max = mean(max_t), sd_max = sd(max_t),
r = cor(min_t, max_t))
pdat %>%
filter(code %in% c("BLABI", "BLUTI", "CHAFF", "GRETI", "PIEFL", "ROBIN")) %>% # Plot focal species
group_by(code) %>% # manipulating the code to get counts per species for facet headers
mutate(code_count = n()) %>%
mutate(cor_coef = round(cor(min_t, max_t),2)) %>% # Add correlation to head
ungroup() %>%
mutate(code_updated = paste0(code, "; n=", code_count, "; R=", cor_coef)) %>%
ggplot(., aes(min_t, max_t, colour=factor(code))) +
stat_smooth(method=lm, fullrange=FALSE) +
geom_point() +
facet_wrap( ~ code_updated,  ncol=2, scales = "free")
mtcars %>%
group_by(carb) %>%
mutate(carb_count = n()) %>%
ungroup() %>%
mutate(carb_updated = paste0(carb, "; n=", carb_count)) %>%
ggplot(aes(x = cyl)) + geom_bar()+
facet_wrap(~carb_updated)
#### As above, but also split by sex
dat.2 <- pdat %>%
group_by(code, sex) %>%
summarise(count = length(code),
mean_min = mean(min_t), sd_min = sd(min_t),
mean_max = mean(max_t), sd_max = sd(max_t),
r = cor(min_t, max_t))
#### As in the first instance, but also split by age
dat.3 <- pdat %>%
group_by(code, age) %>%
summarise(count = length(code),
mean_min = mean(min_t), sd_min = sd(min_t),
mean_max = mean(max_t), sd_max = sd(max_t),
r = cor(min_t, max_t))
#### Count per species, per ringer
dat.r <- pdat %>%
group_by(code, ringer) %>%
summarise(count = length(code)) %>%
spread(ringer,count) %>%
replace(., is.na(.), 0)
shiny::runApp('exploration_app')
runApp('exploration_app')
