geom_point(colour = "blue") +
theme_light() +
theme(
panel.grid.major.x = element_blank(),
panel.border = element_blank(),
axis.ticks.x = element_blank()
) +
scale_y_discrete(labels = paste(ws$player, " ", ws$number),limits = rev(levels(ws$player))) +
labs(title="England", y="Player", x="Average rating")
library(forcats)
ggplot(subset(ws, ws$country == "England") , aes(x = Means, y = fct_rev(number))) +
geom_segment(aes(x = 0, y = number, xend = Means, yend = number), color = "grey50") +
geom_point(colour = "blue") +
theme_light() +
theme(
panel.grid.major.x = element_blank(),
panel.border = element_blank(),
axis.ticks.x = element_blank()
) +
scale_y_discrete(labels = paste(ws$player, " ", ws$number)) +
labs(title="England", y="Player", x="Average rating")
ggplot(subset(ws, ws$country == "England") , aes(x = Means, y = fct_rev(number))) +
geom_segment(aes(x = 0, y = fct_rev(number), xend = Means, yend = number), color = "grey50") +
geom_point(colour = "blue") +
theme_light() +
theme(
panel.grid.major.x = element_blank(),
panel.border = element_blank(),
axis.ticks.x = element_blank()
) +
scale_y_discrete(labels = paste(ws$player, " ", ws$number)) +
labs(title="England", y="Player", x="Average rating")
ws$number <- fct_rev(ws$number)
ggplot(subset(ws, ws$country == "England") , aes(x = Means, y = number)) +
geom_segment(aes(x = 0, y = number, xend = Means, yend = number), color = "grey50") +
geom_point(colour = "blue") +
theme_light() +
theme(
panel.grid.major.x = element_blank(),
panel.border = element_blank(),
axis.ticks.x = element_blank()
) +
scale_y_discrete(labels = paste(ws$player, " ", ws$number)) +
labs(title="England", y="Player", x="Average rating")
ws$number <- fct_rev(ws$number)
ggplot(subset(ws, ws$country == "England") , aes(x = Means, y = number)) +
geom_segment(aes(x = 0, y = number, xend = Means, yend = number), color = "grey50") +
geom_point(colour = "blue") +
theme_light() +
theme(
panel.grid.major.x = element_blank(),
panel.border = element_blank(),
axis.ticks.x = element_blank()
) +
scale_y_discrete(labels = paste(ws$player, " ", ws$number)) +
labs(title="England", y="Player", x="Average rating")
ggplot(subset(ws, ws$country == "England") , aes(x = Means, y = reorder(number, desc(number)))) +
geom_segment(aes(x = 0, y = number, xend = Means, yend = number), color = "grey50") +
geom_point(colour = "blue") +
theme_light() +
theme(
panel.grid.major.x = element_blank(),
panel.border = element_blank(),
axis.ticks.x = element_blank()
) +
scale_y_discrete(labels = paste(ws$player, " ", ws$number)) +
labs(title="England", y="Player", x="Average rating")
ggplot(subset(ws, ws$country == "England") , aes(x = Means, y = (number))) +
geom_segment(aes(x = 0, y = number, xend = Means, yend = number), color = "grey50") +
geom_point(colour = "blue") +
theme_light() +
theme(
panel.grid.major.x = element_blank(),
panel.border = element_blank(),
axis.ticks.x = element_blank()
) +
scale_y_reverse(labels = paste(ws$player, " ", ws$number)) +
labs(title="England", y="Player", x="Average rating")
ggplot(subset(ws, ws$country == "England") , aes(x = Means, y = (number))) +
geom_segment(aes(x = 0, y = number, xend = Means, yend = number), color = "grey50") +
geom_point(colour = "blue") +
theme_light() +
theme(
panel.grid.major.x = element_blank(),
panel.border = element_blank(),
axis.ticks.x = element_blank()
) +
scale_y_reverse() +
labs(title="England", y="Player", x="Average rating")
ggplot(subset(ws, ws$country == "England") , aes(x = Means, y = (number))) +
geom_segment(aes(x = 0, y = number, xend = Means, yend = number), color = "grey50") +
geom_point(colour = "blue") +
theme_light() +
theme(
panel.grid.major.x = element_blank(),
panel.border = element_blank(),
axis.ticks.x = element_blank()
) +
scale_y_discrete(labels = paste(ws$player, " ", ws$number)) +
coord_flip() +
labs(title="England", y="Player", x="Average rating")
ggplot(subset(ws, ws$country == "England") , aes(x = Means, y = (number))) +
geom_segment(aes(x = 0, y = number, xend = Means, yend = number), color = "grey50") +
geom_point(colour = "blue") +
theme_light() +
theme(
panel.grid.major.x = element_blank(),
panel.border = element_blank(),
axis.ticks.x = element_blank()
) +
scale_y_discrete(labels = paste(ws$player, " ", ws$number)) +
labs(title="England", y="Player", x="Average rating")
ggplot(subset(ws, ws$country == "England") , aes(x = Means, y = (number))) +
geom_segment(aes(x = 0, y = number, xend = Means, yend = number), color = "grey50") +
geom_point(colour = "blue") +
theme_light() +
theme(
panel.grid.major.x = element_blank(),
panel.border = element_blank(),
axis.ticks.x = element_blank()
) +
scale_y_discrete(limits = rev(levels(ws$number))) +
labs(title="England", y="Player", x="Average rating")
ggplot(subset(ws, ws$country == "England") , aes(x = Means, y = (number))) +
geom_segment(aes(x = 0, y = number, xend = Means, yend = number), color = "grey50") +
geom_point(colour = "blue") +
theme_light() +
theme(
panel.grid.major.x = element_blank(),
panel.border = element_blank(),
axis.ticks.x = element_blank()
) +  labs(title="England", y="Player", x="Average rating")
ggplot(subset(ws, ws$country == "England") , aes(x = Means, y = (number))) +
geom_segment(aes(x = 0, y = number, xend = Means, yend = number), color = "grey50") +
geom_point(colour = "blue") +
theme_light() +
theme(
panel.grid.major.x = element_blank(),
panel.border = element_blank(),
axis.ticks.x = element_blank()
) +
scale_y_discrete(labels = paste(ws$player, " ", ws$number)) +
labs(title="England", y="Player", x="Average rating")
ggplot(subset(ws, ws$country == "England") , aes(x = Means, y = (number))) +
geom_segment(aes(x = 0, y = number, xend = Means, yend = number), color = "grey50") +
geom_point(colour = "blue") +
theme_light() +
theme(
panel.grid.major.x = element_blank(),
panel.border = element_blank(),
axis.ticks.x = element_blank()
) +
# scale_y_discrete(labels = paste(ws$player, " ", ws$number)) +
labs(title="England", y="Player", x="Average rating")
ggplot(subset(ws, ws$country == "England") , aes(x = Means, y = (number))) +
geom_segment(aes(x = 0, y = number, xend = Means, yend = number), color = "grey50") +
geom_point(colour = "blue") +
theme_light() +
theme(
panel.grid.major.x = element_blank(),
panel.border = element_blank(),
axis.ticks.x = element_blank()
) +
scale_y_discrete(labels = paste(ws$player, " ", ws$number)) +
labs(title="England", y="Player", x="Average rating")
ws$number <- fct_rev(ws$number)
ggplot(subset(ws, ws$country == "England") , aes(x = Means, y = (number))) +
geom_segment(aes(x = 0, y = number, xend = Means, yend = number), color = "grey50") +
geom_point(colour = "blue") +
theme_light() +
theme(
panel.grid.major.x = element_blank(),
panel.border = element_blank(),
axis.ticks.x = element_blank()
) +
#  scale_y_discrete(labels = paste(ws$player, " ", ws$number)) +
labs(title="England", y="Player", x="Average rating")
ggplot(subset(ws, ws$country == "England") , aes(x = Means, y = (number))) +
geom_segment(aes(x = 0, y = number, xend = Means, yend = number), color = "grey50") +
geom_point(colour = "blue") +
theme_light() +
theme(
panel.grid.major.x = element_blank(),
panel.border = element_blank(),
axis.ticks.x = element_blank()
) +
scale_y_discrete(labels = paste(ws$player, " ", ws$number)) +
labs(title="England", y="Player", x="Average rating")
ggplot(subset(ws, ws$country == "England") , aes(x = Means, y = factor(number, levels = c(1:23)))) +
geom_segment(aes(x = 0, y = number, xend = Means, yend = number), color = "grey50") +
geom_point(colour = "blue") +
theme_light() +
theme(
panel.grid.major.x = element_blank(),
panel.border = element_blank(),
axis.ticks.x = element_blank()
) +
scale_y_discrete(labels = paste(ws$player, " ", ws$number)) +
labs(title="England", y="Player", x="Average rating")
ggplot(subset(ws, ws$country == "England") , aes(x = Means, y = factor(number, levels = rev(levels(number))))) +
geom_segment(aes(x = 0, y = number, xend = Means, yend = number), color = "grey50") +
geom_point(colour = "blue") +
theme_light() +
theme(
panel.grid.major.x = element_blank(),
panel.border = element_blank(),
axis.ticks.x = element_blank()
) +
scale_y_discrete(labels = paste(ws$player, " ", ws$number)) +
labs(title="England", y="Player", x="Average rating")
ggplot(subset(ws, ws$country == "England") , aes(x = Means, y = factor(number))) +
geom_segment(aes(x = 0, y = number, xend = Means, yend = number), color = "grey50") +
geom_point(colour = "blue") +
theme_light() +
theme(
panel.grid.major.x = element_blank(),
panel.border = element_blank(),
axis.ticks.x = element_blank()
) +
scale_y_discrete(labels = paste(ws$player, " ", ws$number)) +
labs(title="England", y="Player", x="Average rating")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(dplyr)
library(tidyr)
library(ggplot2)
pdat <- read.csv("../data_raw/all_data.csv")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
pdat <- read.csv("../data_raw/all_data.csv")
library(dplyr)
library(tidyr)
library(ggplot2)
pdat <- read.csv("all_data.csv")
#### Counts, tarsus data (mean & SD) and regression coefficients for each species
dat.1 <- pdat %>%
group_by(code) %>%
summarise(count = length(code),
mean_min = mean(min_t), sd_min = sd(min_t),
mean_max = mean(max_t), sd_max = sd(max_t),
r = cor(min_t, max_t))
pdat %>% filter(code == "GRETI") %>% slice(which.max(max_t)) # Removing GRETI outlier identified a-priori
pdat <- pdat[!(pdat$code == "GRETI" & pdat$ring_no == "Y638208"),]
pdat %>% filter(code %in% c("BLUTI", "GRETI", "CHAFF", "ROBIN")) %>% # Plot focal species
ggplot(., aes(min_t, max_t, colour=factor(code))) +
stat_smooth(method=lm, fullrange=FALSE) +
geom_point() +
facet_wrap( ~ code,  ncol=2, scales = "free")
View(pdat)
View(dat.1)
pdat %>% filter(code %in% c("BLABI", "BLUTI", "CHAFF", "GRETI", "PIEFL", "ROBIN")) %>% # Plot focal species
ggplot(., aes(min_t, max_t, colour=factor(code))) +
stat_smooth(method=lm, fullrange=FALSE) +
geom_point() +
facet_wrap( ~ code,  ncol=2, scales = "free")
lm_eqn = function(df){
m = lm(mint ~ max_t, df);
eq <- substitute(~~R^2~"="~r2,
list(r2 = format(summary(m)$r.squared, digits = 3)))
as.character(as.expression(eq));
}
eqns <- by(pdat, pdat$species, lm_eqn)
m = lm(min_t ~ max_t, df);
lm_eqn = function(df){
m = lm(min_t ~ max_t, df);
eq <- substitute(~~R^2~"="~r2,
list(r2 = format(summary(m)$r.squared, digits = 3)))
as.character(as.expression(eq));
}
eqns <- by(pdat, pdat$species, lm_eqn)
df2 <- data.frame(eq = unclass(eqns), roi_size = as.numeric(names(eqns)))
View(df2)
names(eqns)
df2 <- data.frame(eq = unclass(eqns), roi_size = names(eqns))
View(df2)
unclass(eqns)
pdat %>% filter(code %in% c("BLABI", "BLUTI", "CHAFF", "GRETI", "PIEFL", "ROBIN")) %>% # Plot focal species
ggplot(., aes(min_t, max_t, colour=factor(code))) +
stat_smooth(method=lm, fullrange=FALSE) +
geom_point() +
facet_wrap( ~ code,  ncol=2, scales = "free") +
geom_text(data = df2, aes(x = 1.5, y = 2.2, label = eq, family = "serif"),
color = 'blue',  parse = TRUE)
pdat %>% filter(code %in% c("BLABI", "BLUTI", "CHAFF", "GRETI", "PIEFL", "ROBIN")) %>% # Plot focal species
ggplot(., aes(min_t, max_t, colour=factor(code))) +
stat_smooth(method=lm, fullrange=FALSE) +
geom_point() +
facet_wrap( ~ code,  ncol=2, scales = "free") +
#geom_text(data = df2, aes(x = 1.5, y = 2.2, label = eq, family = "serif"),
color = 'blue',  parse = TRUE)
pdat %>% filter(code %in% c("BLABI", "BLUTI", "CHAFF", "GRETI", "PIEFL", "ROBIN")) %>% # Plot focal species
ggplot(., aes(min_t, max_t, colour=factor(code))) +
stat_smooth(method=lm, fullrange=FALSE) +
geom_point() +
facet_wrap( ~ code,  ncol=2, scales = "free")
df2 <- data.frame(eq = unclass(eqns), species = names(eqns))
df2$lab = paste("Speces =", df2$species, "R^2 =", df2$eq, sep=" ")
View(df2)
lm_eqn = function(df){
m = lm(min_t ~ max_t, df);
substitute(r2,
list(r2 = format(summary(m)$r.squared, digits = 3)))
as.character(as.expression(eq));
}
eqns <- by(pdat, pdat$species, lm_eqn)
lm_eqn = function(df){
m = lm(min_t ~ max_t, df);
eq <- substitute(r2,
list(r2 = format(summary(m)$r.squared, digits = 3)))
as.character(as.expression(eq));
}
eqns <- by(pdat, pdat$species, lm_eqn)
df2 <- data.frame(eq = unclass(eqns), species = names(eqns))
df2$lab = paste(df2$species, "R^2 =", df2$eq, sep=" ")
View(df2)
View(df2)
# Make a labeling function that will refer to your data frame of labels
r2_labeller <- function(variable,value){
return(df2$lab)
}
pdat %>% filter(code %in% c("BLABI", "BLUTI", "CHAFF", "GRETI", "PIEFL", "ROBIN")) %>% # Plot focal species
ggplot(., aes(min_t, max_t, colour=factor(code))) +
stat_smooth(method=lm, fullrange=FALSE) +
geom_point() +
facet_wrap( ~ code,  ncol=2, scales = "free", labeller = r2_labeller)
View(pdat)
View(df2)
pdat <- read.csv("all_data.csv")
#### Counts, tarsus data (mean & SD) and regression coefficients for each species
dat.1 <- pdat %>%
group_by(code) %>%
summarise(count = length(code),
mean_min = mean(min_t), sd_min = sd(min_t),
mean_max = mean(max_t), sd_max = sd(max_t),
r = cor(min_t, max_t))
pdat %>% filter(code == "GRETI") %>% slice(which.max(max_t)) # Removing GRETI outlier identified a-priori
pdat <- pdat[!(pdat$code == "GRETI" & pdat$ring_no == "Y638208"),]
pdat %>% filter(code %in% c("BLABI", "BLUTI", "CHAFF", "GRETI", "PIEFL", "ROBIN")) %>% # Plot focal species
ggplot(., aes(min_t, max_t, colour=factor(code))) +
stat_smooth(method=lm, fullrange=FALSE) +
geom_point() +
facet_wrap( ~ code,  ncol=2, scales = "free", labeller = r2_labeller)
# Create dataframe containing the R^2, species and a facet label
eqns <- by(pdat, pdat$code, lm_eqn)
df2 <- data.frame(eq = unclass(eqns), species = names(eqns))
View(df2)
df2$lab = paste(df2$species, "R^2 =", df2$eq, sep=" ")
pdat %>% filter(code %in% c("BLABI", "BLUTI", "CHAFF", "GRETI", "PIEFL", "ROBIN")) %>% # Plot focal species
ggplot(., aes(min_t, max_t, colour=factor(code))) +
stat_smooth(method=lm, fullrange=FALSE) +
geom_point() +
facet_wrap( ~ code,  ncol=2, scales = "free", labeller = r2_labeller)
View(dat.1)
pdat %>% filter(code %in% c("BLABI", "BLUTI", "CHAFF", "GRETI", "PIEFL", "ROBIN")) %>% # Plot focal species
ggplot(., aes(min_t, max_t, colour=factor(code))) +
stat_smooth(method=lm, fullrange=FALSE) +
geom_point()
pdat %>% filter(code %in% c("BLABI", "BLUTI", "CHAFF", "GRETI", "PIEFL", "ROBIN")) %>% # Plot focal species
ggplot(., aes(min_t, max_t, colour=factor(code))) +
stat_smooth(method=lm, fullrange=FALSE) +
geom_point() +
facet_wrap( ~ code,  ncol=2, scales = "free")
pdat %>%  # Plot focal species
ggplot(., aes(min_t, max_t, colour=factor(code))) +
stat_smooth(method=lm, fullrange=FALSE) +
geom_point() +
facet_wrap( ~ code,  ncol=2, scales = "free")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Load required packages
#devtools::install_github("ecohealthalliance/fasterize")
library(velox)
library(raster)
library(rgdal)
library(rgeos)
library(maptools)
library(plyr)
arable <- raster ("../../../../Shapefiles/SDM/arable")
arable <- raster ("../../Shapefiles/SDM/arable")
arable <- raster ("../Shapefiles/SDM/arable")
arable <- raster ("../../shapefiles/territories/SDM/arable")
arable <- raster ("../../../shapefiles/territories/SDM/arable")
arable <- raster ("../../../shapefiles/breeding success/agriculture")
arable <- raster ("../../shapefiles/breeding success/agriculture")
arable <- raster ("../../shapefiles/breeding_success/agriculture")
arable <- raster ("../../../shapefiles/breeding_success/agriculture")
arable <- raster("../../../shapefiles/breeding_success/agriculture")
arable <- raster("../shapefiles/breeding_success/agriculture")
arable <- raster("../../../../shapefiles/breeding_success/agriculture")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
arable <- raster("../../../shapefiles/breeding_success/agriculture")
arable <- raster("../../shapefiles/breeding_success/agriculture")
arable <- raster("../../../../shapefiles/breeding_success/agriculture")
arable <- raster("../../shapefiles/breeding_success/agriculture")
arable <- raster("../shapefiles/breeding_success/agriculture")
arable <- raster("shapefiles/breeding_success/agriculture")
arable <- raster("../shapefiles/breeding_success/agriculture")
arable <- raster("../../shapefiles/breeding_success/agriculture")
arable <- raster("../../../shapefiles/breeding_success/agriculture")
arable <- raster("../../../shapefiles/breeding_success/agriculture.shp")
arable <- raster("../../shapefiles/breeding_success/agriculture.shp")
arable <- raster("../shapefiles/breeding_success/agriculture.shp")
arable <- raster("../../../../../shapefiles/breeding_success/agriculture.shp")
arable <- raster("../shapefiles/territories/SDM/agriculture")
arable <- raster("../../shapefiles/territories/SDM/agriculture")
arable <- raster("../../../shapefiles/territories/SDM/agriculture")
arable <- raster("../../../shapefiles/territories/SDM/agriculture.tif")
arable <- raster("../../../../shapefiles/territories/SDM/agriculture.tif")
arable <- raster("../../shapefiles/territories/SDM/agriculture.tif")
proj.crs <- CRS("+proj=merc +lon_0=0 +lat_ts=0 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs
+ellps=WGS84 +towgs84=0,0,0")
e10.f <- readOGR(dsn = "../../shapefiles/territories/Forests", layer = "early_10")
setwd("C:/Users/Anthony Caravaggi/Desktop")
nboots<-500
allrepeat <-1000   # this is the number of times the subsample is taken
#Set the working directory, and the number of sites and cameras to keep in the dataset input.
#setwd("XXX")
nsquares <- 1    #only one site used
ncams    <- 60    #60 working cameras
dd <- read.csv("Brackenhurst2018.csv",header=T,stringsAsFactors=F)
tm<- 2772 #trapping hours
# velocity (Hare movement per day in km?)
v <- 0.51 #day range
dens <- (dd$captures/tm)*pi/(v*dd$r*(2+dd$theta))
dens[is.na(dens)]<- 0
# add to original dataframe
d2 <- cbind(dd,dens)
# drop the incomplete(?) squares numbers >13
d2<- d2[d2$square <= nsquares,]
head(d2)
print(summary(d2))
#There can be repeated rows of d2 for the same date,square and camera. Take the mean of these for use in bootstrapping. Need means for some things, sums for others
z1<-aggregate(x=d2[,2:9],by=list(date2=d2$date,sq=d2$square,camera=d2$cam),mean,na.rm=TRUE)
z2<-aggregate(x=d2[,2:9],by=list(date2=d2$date,sq=d2$square,camera=d2$cam),sum,na.rm=TRUE)
head(z1);head(z2)
# keep captures and density from the sum aggregate (z2)
z3<-z1;z3[,c("captures","dens")]<-z2[,c("captures","dens")]
for(i in unique(z3$sq)){
print(i)
print(dim(z3[z3$sq==i,]))
print(z3[z3$sq==i,])
print("_________________________________")
}
z4 <- cbind(z3,dayofyear=julian(as.Date(z3$date,'%d/%m/%Y'),origin = as.Date("2013-01-01")),month=months(as.Date(z3$date,'%d/%m/%Y')) )
z5<- z4[order(z4$dayofyear),]
lookup<-rep(NA,310)
lookup[unique(z5$dayofyear)]<-order(unique(z5$dayofyear))
z6<-cbind(z5,dayseq=lookup[z5$dayofyear])
# this is the main dataframe used by the bootstrapping process, below
dframe <- z6
dframe
# total number of days sampled in the fieldwork
workdays <- max(dframe$dayseq)
workdays
# only bootstrap up to X days effort
ndays <- 1
# assign storage for the output statistics in 4-D array
stat_mean<-array( dim=c(ndays,ncams,nsquares),
dimnames=c("xdays","xcams","xsquares") )
stat_lcl<-array( dim=c(ndays,ncams,nsquares),
dimnames=c("xdays","xcams","xsquares") )
stat_ucl<-array( dim=c(ndays,ncams,nsquares),
dimnames=c("xdays","xcams","xsquares") )
dim=c(ndays,ncams,nsquares)
dimnames=c("xdays","xcams","xsquares")
# assign storage for the output statistics in 4-D array
stat_mean<-array(dim, dimnames )
# assign storage for the output statistics in 4-D array
stat_mean<-array( dim=c(ndays,ncams,nsquares),
dimnames=list("xdays","xcams","xsquares") )
# assign storage for the output statistics in 4-D array
stat_mean<-array( dim=c(ndays,ncams,nsquares)),
dimnames=c("xdays","xcams","xsquares") )
# assign storage for the output statistics in 4-D array
stat_mean<-array( dim=c(ndays,ncams,nsquares))
# assign storage for the output statistics in 4-D array
stat_mean<-array( dim=c(ndays,ncams,nsquares),
dimnames=list(row.names,column.names,
matrix.names) )
# assign storage for the output statistics in 4-D array
col.names <- c("xdays","xcams","xsquares")
stat_mean<-array( dim=c(ndays,ncams,nsquares),
dimnames=list(col.names) )
matrix.names <- c("Matrix1","Matrix2")
stat_mean<-array( dim=c(ndays,ncams,nsquares),
dimnames=list(col.names, matrix.names) )
stat_mean<-array( dim=c(ndays,ncams,nsquares))
stat_lcl<-array( dim=c(ndays,ncams,nsquares) )
stat_ucl<-array( dim=c(ndays,ncams,nsquares) )
# storage for the sample reps
reps  <- matrix(nrow=allrepeat,ncol=3); colnames(reps)<-c("lcl025","mn","ucl975")
boots <- 1:nboots
numdaytable<-table(dframe[,c("square","cam")])
numday=cbind(rep(1:13,21),sort(rep(1:21,13)),stack(as.data.frame(numdaytable)))[,1:3]
colnames(numday)<-c("square","cam","days")
numdaytable
view(numdaytable)
View(dd)
View(d2)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(dplyr)
library(tidyr)
library(ggplot2)
pdat <- read.csv("all_data.csv")
#### Counts, tarsus data (mean & SD) and regression coefficients for each species
dat.1 <- pdat %>%
group_by(code) %>%
summarise(count = length(code),
mean_min = mean(min_t), sd_min = sd(min_t),
mean_max = mean(max_t), sd_max = sd(max_t),
r = cor(min_t, max_t))
View(pdat)
View(dat.1)
install.packages("blogdown")
blogdown::install_hugo()
